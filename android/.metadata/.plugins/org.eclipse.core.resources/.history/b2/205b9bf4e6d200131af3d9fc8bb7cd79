package com.example.wishlist1;

import org.json.JSONException;
import org.json.JSONObject;

import android.net.ConnectivityManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.app.Activity;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.support.v4.app.NavUtils;
import android.annotation.TargetApi;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.os.Build;
import android.provider.MediaStore;

public class NewWishActivity extends Activity {
	public final static String param_userId = "param_userId";
	
	static final int REQUEST_IMAGE_CAPTURE = 1;
	
	private String mUserId;
	
	private ImageView mImageView;
	private Button mImageButton;
	
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_new_wish);
		// Show the Up button in the action bar.
		setupActionBar();
		
		Intent intent = getIntent();
		mUserId = intent.getStringExtra(param_userId);
		mImageView = (ImageView) findViewById(R.id.imageView);
		mImageButton = (Button) findViewById(R.id.imageButton);
	}

	/**
	 * Set up the {@link android.app.ActionBar}, if the API is available.
	 */
	@TargetApi(Build.VERSION_CODES.HONEYCOMB)
	private void setupActionBar() {
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
			getActionBar().setDisplayHomeAsUpEnabled(true);
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.new_wish, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case android.R.id.home:
			// This ID represents the Home or Up button. In the case of this
			// activity, the Up button is shown. Use NavUtils to allow users
			// to navigate up one level in the application structure. For
			// more details, see the Navigation pattern on Android Design:
			//
			// http://developer.android.com/design/patterns/navigation.html#up-vs-back
			//
			NavUtils.navigateUpFromSameTask(this);
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	public void onCancelButtonClicked(View view) {
		Intent resultData = new Intent();
		resultData.putExtra(WishlistActivity.result_shouldRefresh, false);
		setResult(Activity.RESULT_OK, resultData);
		finish();
	}
	
	public void onAddButtonClicked(View view) {
		EditText editTextWishIdea = (EditText) findViewById(R.id.editTextWishIdea);
		String wishName = editTextWishIdea.getText().toString();
		EditText editTextWishDescription = (EditText) findViewById(R.id.editTextWishDescription);
		String wishDescription = editTextWishDescription.getText().toString();
		new PostNewWishTask().execute(new NewWishPost(mUserId,wishName,wishDescription));
	}
	
	public void onImageButtonClicked(View view) {
		// The following code takes a real picture.
		/*
		Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
	    if (takePictureIntent.resolveActivity(getPackageManager()) != null) {
	        startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE);
	    }
	    */
		// The following code should be used in place of taking a real picture.
		mImageButton.setVisibility(View.GONE);
		mImageView.setVisibility(View.VISIBLE);
	}
	
	// This method is called on return from image capture.
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		mImageButton.setVisibility(View.GONE);
		mImageView.setVisibility(View.VISIBLE);
	    if (requestCode == REQUEST_IMAGE_CAPTURE && resultCode == RESULT_OK) {
	        Bundle extras = data.getExtras();
	        Bitmap imageBitmap = (Bitmap) extras.get("data");
	        mImageView.setImageBitmap(imageBitmap);
	    }
	}
	
	// The following is unnecessary, because all http requests can be done synch..ly in a single AsyncTask
	/*
	private String postImageAndGetId(Bitmap imageBitmap) {
		// TODO
		return "";
	}
	
	private class PostImageTask extends AsyncTask<Void, Void, String> {

		@Override
		protected String doInBackground(Void... params) {
			// TODO Auto-generated method stub
			// if the imageview is visible, send the image.
			if (mImageView.getVisibility() == View.VISIBLE) {
				return "";
			} else {
				return "";
			}
		}
		
		protected void onPostExecute(String imageId) {
			// imageId will be empty if no image was sent.
		}
		
	}
	*/
	
	private class NewWishPost extends HttpPost.SendableObject {
		private String wishName;
		private String wishDescription;
		public NewWishPost(String _userId, String _wishName, String _wishDescription) {
			url = "http://ec2-54-186-87-220.us-west-2.compute.amazonaws.com:3000/user/"+_userId+"/items/add";
			wishName = _wishName;
			wishDescription = _wishDescription;
		}
		public String toJSON() {
			JSONObject obj = new JSONObject();
			try {
				obj.put("itemName", wishName);
				obj.put("description", wishDescription);
				obj.put("preferredBrand", "none");
				obj.put("approximatePrice", "0");
			} catch (JSONException e) {
				e.printStackTrace();
			}
			return obj.toString();
		}
	}
	
	private class PostNewWishTask extends AsyncTask<NewWishPost, Void, String> {
		@Override
		protected String doInBackground(NewWishPost... posts) {
			ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
			NewWishPost newWishPost = posts[0];
			return HttpPost.post(newWishPost,cm);
		}
		@Override
		protected void onPostExecute(String response) {
			// Check if there was an error in transmission.
			if (response == HttpPost.ERROR) {
				// TODO: Notify user that there was a connection error.
				return;
			}
			Log.d("tatewty",response);
			Intent resultData = new Intent();
			resultData.putExtra(WishlistActivity.result_shouldRefresh, true);
			setResult(Activity.RESULT_OK, resultData);
			finish();
		}
	}
}
